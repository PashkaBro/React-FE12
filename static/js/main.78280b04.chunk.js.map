{"version":3,"sources":["elements/Footer.jsx","elements/Header.jsx","elements/Site-content.js","elements/hw3.jsx","App.js","serviceWorker.js","index.js"],"names":["Footer","props","Navbar","bg","variant","sticky","Nav","Link","href","menu","Header","Brand","className","Form","inline","FormControl","type","placeholder","Button","Content","Image","src","fluid","res","HW3","useState","todo","setTodo","todoChange","n","Container","onClick","size","menuItems","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mQAoBeA,MAdf,SAAgBC,GACZ,OAEI,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,OAAO,UACpC,kBAACC,EAAA,EAAD,KACI,kBAACA,EAAA,EAAIC,KAAL,CAAUC,KAAK,SAASP,EAAMQ,KAAK,IACnC,kBAACH,EAAA,EAAIC,KAAL,CAAUC,KAAK,aAAaP,EAAMQ,KAAK,IACvC,kBAACH,EAAA,EAAIC,KAAL,CAAUC,KAAK,YAAYP,EAAMQ,KAAK,O,wBCSvCC,MAlBf,SAAgBT,GACZ,OACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACtB,kBAACF,EAAA,EAAOS,MAAR,CAAcH,KAAK,SAASP,EAAMQ,KAAK,IACvC,kBAACH,EAAA,EAAD,CAAKM,UAAU,WACX,kBAACN,EAAA,EAAIC,KAAL,CAAUC,KAAK,SAASP,EAAMQ,KAAK,IACnC,kBAACH,EAAA,EAAIC,KAAL,CAAUC,KAAK,aAAaP,EAAMQ,KAAK,IACvC,kBAACH,EAAA,EAAIC,KAAL,CAAUC,KAAK,YAAYP,EAAMQ,KAAK,KAE1C,kBAACI,EAAA,EAAD,CAAMC,QAAM,GACR,kBAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,SAASL,UAAU,YACxD,kBAACM,EAAA,EAAD,CAAQd,QAAQ,gBAAhB,a,QCJDe,MARf,WACE,OAGI,kBAACC,EAAA,EAAD,CAAOC,IAAI,+CAA+CC,OAAK,K,gBCFjEC,EAAM,GAqDKC,MAlDf,SAAavB,GAAQ,IAAD,EAEQwB,mBAAS,IAFjB,mBAETC,EAFS,KAEHC,EAFG,KAIVC,EAAa,SAACC,GAChBF,EAAQJ,GAAYM,IAqBxB,OACI,yBAAKjB,UAAU,QACX,kBAACkB,EAAA,EAAD,CAAWR,MAAM,MAKb,kBAACT,EAAA,EAAD,CAAMD,UAAU,yBAEZ,kBAACM,EAAA,EAAD,CAAQN,UAAU,MAAMmB,QAAS,kBAAMH,GAAY,KAAnD,QACA,kBAACV,EAAA,EAAD,CAAQa,QAAS,kBAAMH,GAAY,KAAnC,QACA,kBAACV,EAAA,EAAD,CAAQa,QAAS,kBAAMH,GAAY,KAAnC,QACA,kBAACV,EAAA,EAAD,CAAQN,UAAU,MAAMR,QAAQ,YAAY4B,KAAK,KACzCD,QAAS,kBAAMH,EAAWL,EAAM,KADxC,IAC8CG,EAD9C,KAEA,kBAACR,EAAA,EAAD,CAAQa,QAAS,kBAAMH,EAAW,KAAlC,QACA,kBAACV,EAAA,EAAD,CAAQa,QAAS,kBAAMH,EAAW,KAAlC,QACA,kBAACV,EAAA,EAAD,CAAQa,QAAS,kBAAMH,EAAW,KAAlC,SAdR,wCC7BNK,EAAY,CACd,SAAU,OAAQ,WAAY,WAenBC,MAZf,WACI,OACI,yBAAKtB,UAAU,OACX,kBAAC,EAAD,CAAQH,KAAMwB,IACd,kBAAC,EAAD,MACA,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAQxB,KAAMwB,MCNNE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.78280b04.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\nimport {Button, Card, Form, FormControl, Navbar} from \"react-bootstrap\";\nimport {Nav} from 'react-bootstrap'\n\n\nfunction Footer(props) {\n    return (\n\n        <Navbar bg='dark' variant='dark' sticky='bottom'>\n            <Nav>\n                <Nav.Link href=\"#home\">{props.menu[1]}</Nav.Link>\n                <Nav.Link href=\"#features\">{props.menu[2]}</Nav.Link>\n                <Nav.Link href=\"#pricing\">{props.menu[3]}</Nav.Link>\n            </Nav>\n        </Navbar>\n\n    );\n}\n\nexport default Footer;\n","import React from 'react';\nimport '../App.css';\nimport {Navbar, Nav, Button, NavDropdown, FormControl, Form} from \"react-bootstrap\";\n\nfunction Header(props) {\n    return (\n        <Navbar bg=\"dark\" variant=\"dark\">\n            <Navbar.Brand href=\"#home\">{props.menu[0]}</Navbar.Brand>\n            <Nav className=\"mr-auto\">\n                <Nav.Link href=\"#home\">{props.menu[1]}</Nav.Link>\n                <Nav.Link href=\"#features\">{props.menu[2]}</Nav.Link>\n                <Nav.Link href=\"#pricing\">{props.menu[3]}</Nav.Link>\n            </Nav>\n            <Form inline>\n                <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\"/>\n                <Button variant=\"outline-info\">Search</Button>\n            </Form>\n        </Navbar>\n\n    );\n}\n\nexport default Header\n;\n","import React from 'react';\nimport '../App.css';\nimport Image from 'react-bootstrap/Image'\nfunction Content() {\n  return (\n\n\n      <Image src=\"https://jstack.ru/img/GatsbyReact/react.jpeg\" fluid />\n  );\n}\n\nexport default Content;\n","import React, {useState} from 'react';\nimport '../App.css';\nimport Form from 'react-bootstrap/Form';\nimport {Button, Container} from 'react-bootstrap';\n\nlet res = 10;\n\n// let numberOFBtn = []\nfunction HW3(props) {\n\n    const [todo, setTodo] = useState(10);\n\n    const todoChange = (n) => {\n        setTodo(res = res + n);\n\n    }\n    //     const [input, setInput] = useState();\n    //\n    //     const todoField = (e) => {\n    //         setInput(e.target.value);\n    //         btnNum(e);\n    // }\n    //\n    // const todoField2 = (s) => {\n    //     setInput(s.target.value);\n    //     btnNum(s);\n    // }\n    //\n    // const btnNum = () => {\n    //         for (let i=e; i<= s; i++){\n    //             numberOFBtn.push(i)\n    //         }\n    // }\n\n    return (\n        <div className='Cont'>\n            <Container fluid='sm'>\n\n                {/*MIN<input classNAme= 'inputField' type='text' onChange = {todoField}/>*/}\n                {/*{input}MAX <input type='text'  onChange = {todoField2}/>*/}\n\n                <Form className=\"border border-primary\">\n                    {/*{numberOFBtn.map(el => (<Button key = 'index'className='Btn' onClick={() => todoChange(-el)}> {-el} </Button>))}*/}\n                    <Button className='Btn' onClick={() => todoChange(-3)}> -3 </Button>\n                    <Button onClick={() => todoChange(-2)}> -2 </Button>\n                    <Button onClick={() => todoChange(-1)}> -1 </Button>\n                    <Button className='res' variant=\"secondary\" size=\"lg\"\n                            onClick={() => todoChange(res = 0)}> {todo} </Button>\n                    <Button onClick={() => todoChange(+1)}> +1 </Button>\n                    <Button onClick={() => todoChange(+2)}> +2 </Button>\n                    <Button onClick={() => todoChange(+3)}> +3 </Button>\n                </Form>\n                click on result btn to reset value\n            </Container>\n        </div>\n    );\n}\n\nexport default HW3;\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Footer from \"./elements/Footer\";\nimport Header from \"./elements/Header\";\nimport Content from \"./elements/Site-content\";\nimport HW3 from \"./elements/hw3\"\nconst menuItems = [\n    'Navbar', 'Home', 'Features', 'Pricing'\n]\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header menu={menuItems}/>\n            <Content/>\n            <HW3/>\n            {/*<Content2 password='PassWord'/>*/}\n            <Footer menu={menuItems}/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}