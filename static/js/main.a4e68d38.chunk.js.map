{"version":3,"sources":["elements/Footer.jsx","elements/Site-content.js","elements/Calc.jsx","elements/countFields.jsx","App.js","serviceWorker.js","index.js"],"names":["Footer","Content","Calc","props","res","numberOfLines","useState","click","setClick","todoClick","e","close","setClose","className","hidden","Container","fluid","Form","isHidden","type","data-dismiss","onClick","Button","variant","size","CountFields","todo","setTodo","setSend","alert","setAlert","placeholder","autoFocus","onChange","n","target","value","x","push","text-align","map","el","key","length","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6PAoBeA,I,8BCTAC,I,eCiCAC,MAtCf,SAAcC,GACV,IAAIC,EAAMD,EAAME,cADC,EAEOC,mBAASH,EAAME,eAFtB,mBAEZE,EAFY,KAELC,EAFK,KAGXC,EAAY,SAACC,GACfF,EAASJ,GAAYM,IAJR,EAQOJ,oBAAS,GARhB,mBAQZK,EARY,KAQLC,EARK,KAajB,OAEI,yBAAKC,UAAU,OAAOC,OAAQH,GAE1B,kBAACI,EAAA,EAAD,CAAWC,MAAM,MAEb,kBAACC,EAAA,EAAD,CAAMJ,UAAU,wBAAwBK,SAAS,SAC7C,4BAAQC,KAAK,SAASN,UAAU,0BAA0BO,eAAa,QAC/DC,QAAS,WAX7BT,GAAS,KAUG,QAGA,kBAACU,EAAA,EAAD,CAAQT,UAAU,MAAMQ,QAAS,kBAAMZ,GAAW,KAAlD,QACA,kBAACa,EAAA,EAAD,CAAQD,QAAS,kBAAMZ,GAAW,KAAlC,QACA,kBAACa,EAAA,EAAD,CAAQD,QAAS,kBAAMZ,GAAW,KAAlC,QACA,kBAACa,EAAA,EAAD,CAAQT,UAAU,MAAMU,QAAQ,YAAYC,KAAK,KACzCH,QAAS,kBAAMZ,EAAUL,EAAM,KADvC,IAC6CA,EAAMG,EADnD,KAEA,kBAACe,EAAA,EAAD,CAAQD,QAAS,kBAAMZ,EAAU,KAAjC,QACA,kBAACa,EAAA,EAAD,CAAQD,QAAS,kBAAMZ,EAAU,KAAjC,QACA,kBAACa,EAAA,EAAD,CAAQD,QAAS,kBAAMZ,EAAU,KAAjC,YC7BhBJ,EAAgB,GAiDLoB,MA/Cf,SAAqBtB,GAAQ,IAAD,EAGAG,qBAHA,mBAGjBoB,EAHiB,KAGXC,EAHW,OAIArB,qBAJA,mBAIXsB,GAJW,aAKEtB,qBALF,mBAKjBuB,EALiB,KAKVC,EALU,KAuBxB,OAEI,yBAAKjB,UAAU,SAEX,kBAACE,EAAA,EAAD,CAAWC,MAAM,MAEb,6BACI,kBAACC,EAAA,EAAD,CAAMJ,UAAU,aACZ,2BAAOM,KAAK,SAASY,YAAY,eAAeC,WAAW,EAAMC,SAvBnE,SAACC,GACfP,GAASO,EAAEC,OAAOC,UAuBF,kBAACd,EAAA,EAAD,CAAQT,UAAU,MAAMU,QAAQ,YAAYC,KAAK,KACzCH,QAAS,WArBpB,IAACgB,KAqBkCX,IAnB5CE,EAAQvB,EAAciC,KAAKD,IAC3BP,EAAS,wBAAIS,aAAW,QAAf,0CAETT,EAAS,wBAAIjB,UAAU,UAAd,iCAeG,WAMPR,EAAcmC,KAAI,SAAAC,GAAE,OAAI,kBAAC,EAAD,CAAMC,IAAKD,EAAIpC,cAAeA,EAAcA,EAAcsC,OAAS,QAC3Fd,KCvBFe,MAbf,WAEI,OACI,yBAAK/B,UAAU,OAGX,kBAAC,EAAD,QCNQgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a4e68d38.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\nimport {Button, Card, Form, FormControl, Navbar} from \"react-bootstrap\";\nimport {Nav} from 'react-bootstrap'\n\n\nfunction Footer(props) {\n    return (\n\n        <Navbar bg='dark' variant='dark' fixed='bottom'>\n            <Nav>\n                <Nav.Link href=\"#home\">{props.menu[1]}</Nav.Link>\n                <Nav.Link href=\"#features\">{props.menu[2]}</Nav.Link>\n                <Nav.Link href=\"#pricing\">{props.menu[3]}</Nav.Link>\n            </Nav>\n        </Navbar>\n\n    );\n}\n\nexport default Footer;\n","import React from 'react';\nimport '../App.css';\nimport Image from 'react-bootstrap/Image'\nfunction Content() {\n  return (\n\n\n      <Image src=\"https://jstack.ru/img/GatsbyReact/react.jpeg\" fluid />\n  );\n}\n\nexport default Content;\n","import React, {useState} from 'react';\nimport '../App.css';\nimport Form from 'react-bootstrap/Form';\nimport {Button, Container} from 'react-bootstrap';\n\n\nfunction Calc(props) {\n    let res = props.numberOfLines\n    let [click, setClick] = useState(props.numberOfLines);\n    const todoClick = (e) => {\n        setClick(res = res + e);\n    };\n\n\n    let [close, setClose] = useState(false);\n    const todoClose = (t) => {\n        setClose(true);\n    };\n\n    return (\n\n        <div className='Cont' hidden={close}>\n\n            <Container fluid='sm'>\n\n                <Form className=\"border border-primary\" isHidden='false'>\n                    <button type=\"button\" className=\"close alert-dismissible\" data-dismiss=\"alert\"\n                            onClick={() => todoClose()}>&times;</button>\n\n                    <Button className='Btn' onClick={() => todoClick(-3)}> -3 </Button>\n                    <Button onClick={() => todoClick(-2)}> -2 </Button>\n                    <Button onClick={() => todoClick(-1)}> -1 </Button>\n                    <Button className='res' variant=\"secondary\" size=\"lg\"\n                            onClick={() => todoClick(res = 0)}> {res = click} </Button>\n                    <Button onClick={() => todoClick(+1)}> +1 </Button>\n                    <Button onClick={() => todoClick(+2)}> +2 </Button>\n                    <Button onClick={() => todoClick(+3)}> +3 </Button>\n                </Form>\n            </Container>\n\n        </div>\n    );\n}\n\nexport default Calc;\n","import React, {useState} from 'react';\nimport '../App.css';\nimport Form from 'react-bootstrap/Form';\nimport {Button, Container} from 'react-bootstrap';\nimport Calc from \"./Calc\";\n\nlet warning;\nlet numberOfLines = [];\n\nfunction CountFields(props) {\n\n\n    const [todo, setTodo] = useState();\n    const [send, setSend] = useState();\n    const [alert, setAlert] = useState();\n\n\n    const todoInput = (n) => {\n        setTodo(+n.target.value)\n    }\n\n    const todoSend = (x) => {\n        if (x) {\n            setSend(numberOfLines.push(x))\n            setAlert(<h9 text-align='left'>'click on result btn to reset value'</h9>)\n        } else {\n            setAlert(<h1 className='danger'>'Please enter some number'</h1>)\n        }\n\n    }\n\n\n    return (\n\n        <div className='Cont2'>\n\n            <Container fluid='sm'>\n\n                <div>\n                    <Form className='inputForm'>\n                        <input type='number' placeholder='enter number' autoFocus={true} onChange={todoInput}/>\n                        <Button className='res' variant=\"secondary\" size=\"lg\"\n                                onClick={() => todoSend(todo)}> ADD </Button>\n                    </Form>\n\n\n                </div>\n                {numberOfLines.map(el => <Calc key={el} numberOfLines={numberOfLines[numberOfLines.length - 1]}/>)}\n                {alert}\n            </Container>\n\n        </div>\n\n    );\n}\n\nexport default CountFields;\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Footer from \"./elements/Footer\";\nimport Header from \"./elements/Header\";\nimport Content from \"./elements/Site-content\";\nimport CountFields from \"./elements/countFields\"\nimport Calc from \"./elements/Calc\";\nconst menuItems = [\n    'Navbar', 'Home', 'Features', 'Pricing'\n]\n\nfunction App() {\n\n    return (\n        <div className=\"App\">\n            {/*<Header menu={menuItems}/>*/}\n            {/*<Content/>*/}\n            <CountFields/>\n            {/*<Content2 password='PassWord'/>*/}\n            {/*<Footer menu={menuItems}/>*/}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}